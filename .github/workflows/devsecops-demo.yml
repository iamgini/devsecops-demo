name: DevSecOps Demo

on:
  push:
    branches:
      - main

jobs:

  checkout:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.set-sha.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update App Version
        id: set-sha
        run: |
          NEW_VERSION="v$(date +'%Y%m%d%H%M%S')"
          echo $NEW_VERSION > VERSION.txt
          git config user.name "Demo Bot"
          git config user.email "demo@example.com"
          git add VERSION.txt
          git commit -m "Update app version to $NEW_VERSION" || echo "No changes to commit"
          git push || true
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  build-and-publish:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t flask-devsecops-demo:${{ needs.checkout.outputs.sha }} .

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: flask-devsecops-demo:${{ needs.checkout.outputs.sha }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Push image to Quay
        run: |
          docker tag flask-devsecops-demo:${{ needs.checkout.outputs.sha }} quay.io/iamgini/flask-devsecops-demo:${{ needs.checkout.outputs.sha }}
          docker push quay.io/iamgini/flask-devsecops-demo:${{ needs.checkout.outputs.sha }}

      - name: Install Cosign
        run: |
          COSIGN_VERSION="v2.5.0"
          curl -Lo cosign https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

  secret-scan:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          scan_all: true

  # security-scan:
  #   runs-on: ubuntu-latest
  #   needs: checkout
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Python and dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y python3-pip
  #         pip install bandit

  #     - name: Run Bandit security scan
  #       run: bandit -r .
  
  

  #     - name: Trivy Scan
  #       uses: aquasecurity/trivy-action@v0.32.0
  #       with:
  #         image-ref: quay.io/iamgini/flask-devsecops-demo:${{ needs.checkout.outputs.sha }}


  security-scan:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3

      - name: Install Python and Bandit
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install bandit

      - name: Run Bandit security scan
        # run: bandit -r .
        # B324 → weak MD5
        # B104 → binding to all interfaces
        run: bandit -r . -x B104


      - name: Install Trivy
        run: |
          TRIVY_VERSION="0.43.1"  # pick a stable release
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_0.43.1_Linux-64bit.tar.gz -o trivy.tar.gz
          tar zxvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Trivy container scan
        run: trivy image quay.io/iamgini/flask-devsecops-demo:${{ needs.checkout.outputs.sha }}
          

  opa-check:
    runs-on: ubuntu-latest
    needs: [secret-scan, build-and-publish, security-scan]
    steps:
      - uses: actions/checkout@v3
      - name: Install OPA
        run: |
          OPA_VERSION="v0.48.0"
          curl -L -o opa https://openpolicyagent.org/downloads/${OPA_VERSION}/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: OPA policy check
        run: |
          echo 'package main
          deny[msg] { input.secrets != "" ; msg = "Secrets found in repo" }' > policy.rego
          echo '{"secrets": ""}' > input.json
          opa eval --data policy.rego --input input.json "data.main.deny"

  print-sha:
    runs-on: ubuntu-latest
    needs: opa-check
    steps:
      - name: Print Commit SHA
        run: |
          echo "=================================="
          echo " Commit SHA: $GITHUB_SHA"
          echo "=================================="
