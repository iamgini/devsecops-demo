name: DevSecOps Demo

on:
  push:
    branches:
      - main

jobs:
  build-and-secure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update App Version
        run: |
          NEW_VERSION="v$(date +'%Y%m%d%H%M%S')"
          echo $NEW_VERSION > VERSION.txt
          git config user.name "Demo Bot"
          git config user.email "demo@example.com"
          git add VERSION.txt
          git commit -m "Update app version to $NEW_VERSION"
          git push || echo "No changes to commit"

      - name: Build Docker image
        run: docker build -t demo-app:${{ github.sha }} .

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: demo-app:${{ github.sha }}

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          version: latest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Push image
      #   run: |
      #     docker tag demo-app:${{ github.sha }} yourusername/demo-app:${{ github.sha }}
      #     docker push yourusername/demo-app:${{ github.sha }}
          
      - name: Install Cosign
        run: |
          COSIGN_VERSION="v2.5.0"
          curl -Lo cosign https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/


      # - name: Sign local container image
      #   run: |
      #     cosign generate-key-pair || echo "Keys already exist"
      #     cosign sign --key cosign.key --force --insecure-ignore-tlog demo-app:${{ github.sha }}

      - name: Install OPA
        run: |
          OPA_VERSION="v0.48.0"
          curl -L -o opa https://openpolicyagent.org/downloads/${OPA_VERSION}/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

                
      - name: OPA policy check
        run: |
          echo 'package main
          deny[msg] { input.secrets != "" ; msg = "Secrets found in repo" }' > policy.rego
          echo '{"secrets": ""}' > input.json
          opa eval --data policy.rego --input input.json "data.main.deny"
